stages:
  - ci-infrastructure-check
  - trigger-infrastructure
  - signal
  - clear-docker-cache
  - build-deploy-base
  - provision-client
  - build
  - end-to-end-setup-arango
  - end-to-end-setup
  - end-to-end-test
  - end-to-end-teardown

variables:
  HARBOR_USER: 'robot$$datafed+harbor_datafed_gitlab_ci_registry'
  REGISTRY: 'camden.ornl.gov'
  DATAFED_DEPENDENCIES_INSTALL_PATH: "/tmp/install"
################################################################################
# STAGE: ci-infrastructure-check
################################################################################
# ci-infrastructure-check stage is designed to check that the infrastructure is
# up and running before attempting to launch the CI pipelines

check-ci-infrastructure:
  stage: ci-infrastructure-check
  tags:
    - datafed-infrastructure
  script:
    - |
      BUILD_INFRASTRUCTURE="FALSE"
      COMPUTE_INSTANCE_NAMES=("ci-datafed-arangodb" "ci-datafed-core" "ci-datafed-globus2" "ci-datafed-client")
      for INSTANCE_NAME in "${COMPUTE_INSTANCE_NAMES[@]}"; do
        if ! ./scripts/ci_pipeline_setup.sh --compute-instance-name "$INSTANCE_NAME"; then
          BUILD_INFRASTRUCTURE="TRUE"
        fi
      done
      if [ "$BUILD_INFRASTRUCTURE" == "TRUE" ]
      then
        cp gitlab_templates/build_ci_infrastructure.yml ci_infrastructure.yml
      else
        cp gitlab_templates/skip_ci_infrastructure.yml ci_infrastructure.yml
      fi
  resource_group: infrastructure_build
  artifacts:
    paths:
      - ci_infrastructure.yml 

run-trigger-job:
  stage: trigger-infrastructure
  trigger:
    include:
      - artifact: ci_infrastructure.yml
        job: check-ci-infrastructure
    strategy: depend
  resource_group: infrastructure_build

################################################################################
# STAGE: signal
################################################################################
# Stage is used to separte the trigger job from the remaining jobs and to act
# as an anchor for setting up dependencies
signal:
  stage: signal
  tags:
    - runner
  script:
    - echo "Starting Build"
  rules:
    - exists:
      - check-ci-infrastrucure
    - exists:
      - run-trigger-job
    - when: on_success

################################################################################
# STAGE: clear-docker-cache
################################################################################
# Used to clear out the cache on VMs where the images are being built
clear-core-cache:
  stage: clear-docker-cache
  needs: ["signal"]
  tags:
    - ci_1
  script:
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker system prune -f
    - ./scripts/ci_purge_images.sh

clear-repo-cache:
  stage: clear-docker-cache
  needs: ["signal"]
  tags:
    - ci_3
  script:
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker system prune -f
    - ./scripts/ci_purge_images.sh

clear-python-client-cache:
  stage: clear-docker-cache
  needs: ["signal"]
  tags:
    - ci_5
  script:
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker system prune -f
    - ./scripts/ci_purge_images.sh


################################################################################
# STAGE: build-deploy-base
################################################################################
# Building base containers the base containers should have all the required
# dependencies it should not be necessary to build them every time. Ideally, we
# would rarely need to rebuild the dependencies and we could just reuse the
# container "golden base" images already stored in the registry.
#
# NOTE GitLab is set to remove images after a month, so they will be forced to
# rebuild at least once a month.
build-ws-base:
  needs: ["clear-core-cache"]
  stage: build-deploy-base
  variables:
    IMAGE_TAG: "datafed/ws-base"
    GIT_STRATEGY: clone
  tags:
    - ci-datafed-core
    - docker
  script:
    - docker system prune -f
    - docker build -f web/docker/Dockerfile.web-base.ubuntu -t "${REGISTRY}/${IMAGE_TAG}" .
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker push "${REGISTRY}/${IMAGE_TAG}"

build-core-base:
  needs: ["clear-core-cache"]
  stage: build-deploy-base
  variables:
    IMAGE_TAG: "datafed/core-base"
    GIT_STRATEGY: clone
  tags:
    - ci-datafed-core
    - docker
  script:
    - docker system prune -f
    - docker build -f core/docker/Dockerfile.core-base.ubuntu -t "${REGISTRY}/${IMAGE_TAG}" .
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker push "${REGISTRY}/${IMAGE_TAG}"

build-repo-base:
  needs: ["clear-repo-cache"]
  variables:
    IMAGE_TAG: "datafed/repo-base"
    GIT_STRATEGY: clone
  stage: build-deploy-base
  tags:
    - ci-datafed-repo
    - docker
  script:
    - docker system prune -f
    - docker build -f repository/docker/Dockerfile.repo-base.ubuntu -t "${REGISTRY}/${IMAGE_TAG}" .
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker push "${REGISTRY}/${IMAGE_TAG}"

build-python-client-base:
  needs: ["clear-python-client-cache"]
  variables:
    IMAGE_TAG: "datafed/python-client-base"
    GIT_STRATEGY: clone
  stage: build-deploy-base
  tags:
    - ci-datafed-repo
    - docker
  script:
    - docker system prune -f
    - docker build -f repository/docker/Dockerfile.repo-base.ubuntu -t "${REGISTRY}/${IMAGE_TAG}" .
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker push "${REGISTRY}/${IMAGE_TAG}"

build-gcs-base:
  needs: ["clear-repo-cache"]
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_STRATEGY: clone
    DISTRO: "ubuntu-20.04"
    GCS_TAG: "${REGISTRY}/datafed/gcs-ubuntu-focal"
    IMAGE_TAG2: "datafed/gcs-authz-base"
    IMAGE_TAG3: "datafed/gcs-authz"
    GCS_SUBMODULE_VERSION: "v2.6.0"
  stage: build-deploy-base
  tags:
    - ci-datafed-globus
    - docker
  script:
    - docker system prune -f
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - >
      if ! docker pull "${GCS_TAG}:${GCS_SUBMODULE_VERSION}"; then
        cd external/globus-connect-server-deploy/docker
        git checkout "${GCS_SUBMODULE_VERSION}"
        ./docker-build-gcs.sh "${DISTRO}"
        LATEST_IMAGE=$(docker images | grep ubuntu-focal | head -n1 | awk '{print $3}')
        docker tag "$LATEST_IMAGE" "$GCS_TAG:${GCS_SUBMODULE_VERSION}" 
        docker push "$GCS_TAG:${GCS_SUBMODULE_VERSION}"
        docker tag "$GCS_TAG:${GCS_SUBMODULE_VERSION}" "$GCS_TAG" 
        docker push "$GCS_TAG"
        cd ../../../ # back too root of project
      else
        echo "Docker image already exists in the registry. Skipping build."
      fi 

################################################################################
# STAGE: provision client
################################################################################
provision-client:
  needs: ["signal"]
  variables:
    GIT_STRATEGY: clone
  stage: provision-client
  tags:
    - ci-datafed-client
  script:
    - ./scripts/generate_datafed.sh
    - ./scripts/install_client_dependencies.sh
  rules:
    - changes:
        - scripts/generate_datafed.sh
        - scripts/install_client_dependencies.sh
        - scripts/dependency_install_functions.sh
        - scripts/dependency_versions.sh
 
################################################################################
# STAGE: build
################################################################################
# Building containers for running services
build-ws:
  needs: ["build-ws-base"]
  stage: build
  variables:
    IMAGE_TAG: "datafed/ws-"
    GIT_STRATEGY: clone
  tags:
    - ci-datafed-core
    - docker
  rules:
    - changes:
        - dockerfiles/*
        - scripts/*
        - web/*
        - common/proto/*
        - .gitlab-ci.yml
      when: on_success
    - exists:
        - deploy-ws-base
      when: on_success
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker build -f web/docker/Dockerfile.web.ubuntu -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" .
    - docker push "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}"

build-core:
  needs: ["build-core-base"]
  stage: build
  variables:
    IMAGE_TAG: "datafed/core-"
    GIT_STRATEGY: clone
  tags:
    - ci-datafed-core
    - docker
  rules:
    - changes:
        - dockerfiles/*
        - scripts/*
        - common/*
        - core/*
        - .gitlab-ci.yml
      when: on_success
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - env
    - ./scripts/generate_datafed.sh
    - cat ./config/datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker build -f core/docker/Dockerfile.core.ubuntu -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" .
    - docker push "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}"

build-foxx:
  stage: build
  needs: ["signal"]
  variables:
    GIT_STRATEGY: clone
    DATAFED_DATABASE_PASSWORD: "${CI_DATAFED_DATABASE_PASSWORD}"
    DATAFED_ZEROMQ_SYSTEM_SECRET: "${CI_DATAFED_ZEROMQ_SYSTEM_SECRET}"
  tags:
    - ci-datafed-arango
  script:
    - arangod --version
    - sudo systemctl status arangodb3
    - ./scripts/generate_datafed.sh
    - env
    - cat ./config/datafed.sh
    - >
      cmake -S. -B build
      -DENABLE_FOXX_TESTS=ON
      -DBUILD_CORE_SERVER=OFF
      -DBUILD_COMMON=OFF
      -DBUILD_WEB_SERVER=OFF
      -DBUILD_DOCS=OFF
      -DBUILD_PYTHON_CLIENT=OFF
      -DBUILD_TESTS=ON
      -DINSTALL_FOXX=ON
    - cmake --build build
    - cmake --build build --target install
    - cmake --build build --target test

build-repo:
  variables:
    IMAGE_TAG: "datafed/repo-"
    GIT_STRATEGY: clone
  needs: ["build-repo-base"]
  stage: build
  tags:
    - ci-datafed-repo
    - docker
  rules:
    - changes:
        - dockerfiles/*
        - scripts/*
        - common/*
        - repository/*
        - .gitlab-ci.yml
      when: on_success
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker build -f repository/docker/Dockerfile.repo.ubuntu -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" .
    - docker push "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}"

build-gcs-authz:
  stage: build
  variables:
    IMAGE_TAG: "datafed/gcs-authz-"
    GIT_STRATEGY: clone
  tags:
    - ci-datafed-globus
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker build -f repository/docker/Dockerfile.gcs-authz.ubuntu -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" .
    - docker push "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}"

build-python-client:
  variables:
    IMAGE_TAG: "datafed/python-client-"
    GIT_STRATEGY: clone
  stage: build
  tags:
    - docker
    - ci-datafed-client
  rules:
    - changes:
        - python/*
        - scripts/*
        - common/*
        - .gitlab-ci.yml
      when: always
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - docker build -f python/docker/Dockerfile.python-client.ubuntu -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" .
    - docker push "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}"

################################################################################
# STAGE: Integration
################################################################################

end-to-end-arango-setup:
  variables:
    GIT_STRATEGY: clone
  stage: end-to-end-setup-arango
  tags:
    - ci-datafed-arango
  script:
    - arangod --version
    - ./scripts/run_arango_service.sh

end-to-end-ws-setup:
  variables:
    IMAGE_TAG: "datafed/ws-"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "$CI_PROJECT_DIR/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    DATAFED_WEB_KEY_DIR: "/tmp/keys"
    DATAFED_WEB_CERT_NAME: "cert.crt"
    DATAFED_WEB_KEY_NAME: "cert.key"
    DATAFED_WEB_CERT_PATH: "${DATAFED_WEB_KEY_DIR}/${DATAFED_WEB_CERT_NAME}"
    DATAFED_WEB_CSR_PATH: "${DATAFED_WEB_KEY_DIR}/cert.csr"
    DATAFED_WEB_KEY_PATH: "${DATAFED_WEB_KEY_DIR}/${DATAFED_WEB_KEY_NAME}"
  stage: end-to-end-setup
  needs: ["end-to-end-core-setup"]
  #  dependencies: 
  #  - end-to-end-core-setup
  tags:
    - ci-datafed-core
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - mkdir -p "${DATAFED_WEB_KEY_DIR}"
    - ./scripts/ci_setup_web_certs.sh
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - ./scripts/generate_datafed.sh
    - docker login  "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - USER_ID=$(id -u)
    - GROUP_ID=$(id -g)
    - CORE_ADDRESS=$(hostname -I | awk '{print $1}')
    - cat $CI_DATAFED_CORE_PUB_KEY > /tmp/datafed-core-key.pub
    - env
    - ./scripts/container_stop.sh -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}"
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - echo "#!/bin/bash" > run_web.sh
    - echo "docker run -d \\" >> run_web.sh
    - echo "--name \"ws-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}\" \\" >> run_web.sh
    - echo "-e DATAFED_GLOBUS_APP_SECRET=\"CI_DATAFED_GLOBUS_APP_SECRET\" \\" >> run_web.sh
    - echo "-e DATAFED_GLOBUS_APP_ID=\"$CI_DATAFED_GLOBUS_APP_ID\" \\" >> run_web.sh
    - echo "-e DATAFED_ZEROMQ_SESSION_SECRET=\"$CI_DATAFED_ZEROMQ_SESSION_SECRET\" \\" >> run_web.sh
    - echo "-e DATAFED_ZEROMQ_SYSTEM_SECRET=\"$CI_DATAFED_ZEROMQ_SYSTEM_SECRET\" \\" >> run_web.sh
    - echo "-e DATAFED_DOMAIN=\"$CI_DATAFED_DOMAIN\" \\" >> run_web.sh
    - echo "-e DATAFED_WEB_CERT_PATH=\"/datafed/install/keys/${DATAFED_WEB_CERT_NAME}\" \\" >> run_web.sh
    - echo "-e DATAFED_WEB_KEY_PATH=\"/datafed/install/keys/${DATAFED_WEB_KEY_NAME}\" \\" >> run_web.sh
    - echo "-e DATAFED_DEFAULT_LOG_PATH=\"${CONTAINER_LOG_FILE_PATH}\" \\" >> run_web.sh
    - echo "-e DATAFED_CORE_ADDRESS_PORT_INTERNAL=\"$CORE_ADDRESS:7513\" \\" >> run_web.sh
    - echo "-e UID=\"$USER_ID\" \\" >> run_web.sh
    - echo "-p 443:443 \\" >> run_web.sh
    - echo "-v \"${HOST_LOG_FILE_PATH}:${CONTAINER_LOG_FILE_PATH}\" \\" >> run_web.sh
    - echo "-v \"/tmp/datafed-core-key.pub:/datafed/install/keys/datafed-core-key.pub\" \\" >> run_web.sh
    - echo "-v \"${DATAFED_WEB_CERT_PATH}:/datafed/install/keys/${DATAFED_WEB_CERT_NAME}\" \\" >> run_web.sh
    - echo "-v \"${DATAFED_WEB_KEY_PATH}:/datafed/install/keys/${DATAFED_WEB_KEY_NAME}\" \\" >> run_web.sh
    - echo "-t \"${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}\" " >> run_web.sh
    - chmod +x run_web.sh
    - ./run_web.sh
    - sleep 30
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" 

# Note here we use network=host to run the docker container this is
# because we do not need it to communicate with an external port 
end-to-end-core-setup:
  variables:
    IMAGE_TAG: "datafed/core-"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "$CI_PROJECT_DIR/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    DATAFED_DATABASE_HOST: "$CI_DATAFED_DATABASE_HOST"
  stage: end-to-end-setup
  needs: ["end-to-end-arango-setup"]
  tags:
    - ci-datafed-core
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - USER_ID=$(id -u)
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - ./scripts/container_stop.sh -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}"
    - ./scripts/ci_database_health_check.sh
    - cat $CI_DATAFED_CORE_PUB_KEY > /tmp/datafed-core-key.pub
    - cat $CI_DATAFED_CORE_PRIV_KEY > /tmp/datafed-core-key.priv
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - echo "#!/bin/bash" > run_core.sh
    - echo "docker run -d \\" >> run_core.sh
    - echo "--name \"core-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}\" \\" >> run_core.sh
    - echo "-e DATAFED_GLOBUS_APP_SECRET=\"$CI_DATAFED_GLOBUS_APP_SECRET\" \\" >> run_core.sh
    - echo "-e DATAFED_GLOBUS_APP_ID=\"$CI_DATAFED_GLOBUS_APP_ID\" \\" >> run_core.sh
    - echo "-e DATAFED_ZEROMQ_SESSION_SECRET=\"$CI_DATAFED_ZEROMQ_SESSION_SECRET\" \\" >> run_core.sh
    - echo "-e DATAFED_ZEROMQ_SYSTEM_SECRET=\"$CI_DATAFED_ZEROMQ_SYSTEM_SECRET\" \\" >> run_core.sh
    - echo "-e DATAFED_DOMAIN=\"$CI_DATAFED_DOMAIN\" \\" >> run_core.sh
    - echo "-e DATAFED_DATABASE_PASSWORD=\"$CI_DATAFED_DATABASE_PASSWORD\" \\" >> run_core.sh
    - echo "-e DATAFED_DATABASE_IP_ADDRESS_PORT=\"$CI_DATAFED_DATABASE_IP_ADDRESS_PORT\" \\" >> run_core.sh
    - echo "-e DATAFED_DEFAULT_LOG_PATH=\"$CONTAINER_LOG_FILE_PATH\" \\" >> run_core.sh
    - echo "-e UID=\"$USER_ID\" \\" >> run_core.sh
    - echo "--network host \\" >> run_core.sh
    - echo "-v \"${HOST_LOG_FILE_PATH}:${CONTAINER_LOG_FILE_PATH}\" \\" >> run_core.sh
    - echo "-v \"/tmp/datafed-core-key.pub\":/source/install/keys/datafed-core-key.pub \\" >> run_core.sh
    - echo "-v \"/tmp/datafed-core-key.priv\":/source/install/keys/datafed-core-key.priv \\" >> run_core.sh
    - echo "-t \"${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}\"" >> run_core.sh
    - chmod +x run_core.sh
    - ./run_core.sh
    - sleep 10
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" 

# Repo server currently will crash on startup if it cannot connect to the core
# server.
end-to-end-repo-setup:
  variables:
    IMAGE_TAG: "datafed/repo-"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "$CI_PROJECT_DIR/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
  stage: end-to-end-setup
  needs: ["end-to-end-core-setup"]
  tags:
    - ci-datafed-globus
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - USER_ID=$(id -u)
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - ./scripts/container_stop.sh -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}"
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - echo "#!/bin/bash" > run_repo.sh
    - echo "docker run \\" >> run_repo.sh
    - echo "--name \"repo-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}\" \\" >> run_repo.sh
    - echo "-e DATAFED_GLOBUS_APP_SECRET=\"$CI_DATAFED_GLOBUS_APP_SECRET\" \\" >> run_repo.sh
    - echo "-e DATAFED_GLOBUS_APP_ID=\"$CI_DATAFED_GLOBUS_APP_ID\" \\" >> run_repo.sh
    - echo "-e DATAFED_ZEROMQ_SESSION_SECRET=\"$CI_DATAFED_ZEROMQ_SESSION_SECRET\" \\" >> run_repo.sh
    - echo "-e DATAFED_ZEROMQ_SYSTEM_SECRET=\"$CI_DATAFED_ZEROMQ_SYSTEM_SECRET\" \\" >> run_repo.sh
    - echo "-e DATAFED_DOMAIN=\"$CI_DATAFED_DOMAIN\" \\" >> run_repo.sh
    - echo "-e DATAFED_DEFAULT_LOG_PATH=\"$CONTAINER_LOG_FILE_PATH\" \\" >> run_repo.sh
    - echo "-e UID=\"$USER_ID\" \\" >> run_repo.sh
    - echo "-v \"${HOST_LOG_FILE_PATH}:${CONTAINER_LOG_FILE_PATH}\" \\" >> run_repo.sh
    - echo "-v \"$CI_DATAFED_REPO_PUB_KEY\":/source/install/keys/datafed-repo-key.pub \\" >> run_repo.sh
    - echo "-v \"$CI_DATAFED_REPO_PRIV_KEY\":/source/install/keys/datafed-repo-key.priv \\" >> run_repo.sh
    - echo "-t \"${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}\"" >> run_repo.sh
    - chmod +x run_repo.sh
    - ./run_repo.sh
    - sleep 10
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" 

# Requires setting up Globus Connect Server, requires firewall exceptions on
# the machine running this.
end-to-end-gcs-authz-setup:
  variables:
    IMAGE_TAG: "datafed/gcs-authz-"
    HOST_LOG_FILE_PATH: "$CI_PROJECT_DIR/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    GIT_STRATEGY: clone
  stage: end-to-end-setup
  tags:
    - ci-datafed-globus
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - USER_ID=$(id -u)
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY}"
    - ./scripts/container_stop.sh -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}"
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - echo "#!/bin/bash" > run_globus.sh
    - echo "docker run \\" >> run_globus.sh
    - echo "--name \"gcs-authz-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}\" \\" >> run_globus.sh
    - echo "-e DATAFED_GLOBUS_APP_SECRET=\"$CI_DATAFED_GLOBUS_APP_SECRET\" \\" >> run_globus.sh
    - echo "-e DATAFED_GLOBUS_APP_ID=\"$CI_DATAFED_GLOBUS_APP_ID\" \\" >> run_globus.sh
    - echo "-e DATAFED_ZEROMQ_SESSION_SECRET=\"$CI_DATAFED_ZEROMQ_SESSION_SECRET\" \\" >> run_globus.sh
    - echo "-e DATAFED_ZEROMQ_SYSTEM_SECRET=\"$CI_DATAFED_ZEROMQ_SYSTEM_SECRET\" \\" >> run_globus.sh
    - echo "-e DATAFED_DOMAIN=\"$CI_DATAFED_DOMAIN\" \\" >> run_globus.sh
    - echo "-e UID=\"$USER_ID\" \\" >> run_globus.sh
    - echo "-v \"${HOST_LOG_FILE_PATH}:${CONTAINER_LOG_FILE_PATH}\" \\" >> run_globus.sh
    - echo "-v \"$CI_DATAFED_REPO_PUB_KEY\":/source/install/keys/datafed-repo-key.pub \\" >> run_globus.sh
    - echo "-v \"$CI_DATAFED_REPO_PRIV_KEY\":/source/install/keys/datafed-repo-key.priv \\" >> run_globus.sh
    - echo "-t \"${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}\"" >> run_globus.sh
    - chmod +x run_globus.sh
    - ./run_globus.sh
    - sleep 10
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${IMAGE_TAG}${BRANCH_LOWER}" 

################################################################################
# Actual Testing
################################################################################
end-to-end-client-test:
  variables:
    GIT_STRATEGY: clone
    DATAFED_DATABASE_HOST: "${CI_DATAFED_DATABASE_HOST}"
    DATAFED_DATABASE_ZEROMQ_SYSTEM_SECRET: "${CI_DATAFED_DATABASE_ZEROMQ_SYSTEM_SECRET}"
    DATAFED_DATABASE_PASSWORD: "${CI_DATAFED_DATABASE_PASSWORD}"
    DATAFED_USER89_PASSWORD: "${CI_DATAFED_USER89_PASSWORD}"
    DATAFED_USER89_GLOBUS_REFRESH_TOKEN: "${CI_DATAFED_USER89_GLOBUS_REFRESH_TOKEN}"
    DATAFED_USER89_GLOBUS_ACCESS_TOKEN: "${CI_DATAFED_USER89_GLOBUS_ACCESS_TOKEN}"
    DATAFED_USER89_GLOBUS_UUID: "${CI_DATAFED_USER89_GLOBUS_UUID}"
    DATAFED_USER99_PASSWORD: "${CI_DATAFED_USER99_PASSWORD}"
    DATAFED_USER99_GLOBUS_REFRESH_TOKEN: "${CI_DATAFED_USER99_GLOBUS_REFRESH_TOKEN}"
    DATAFED_USER99_GLOBUS_ACCESS_TOKEN: "${CI_DATAFED_USER99_GLOBUS_ACCESS_TOKEN}"
    DATAFED_USER99_GLOBUS_UUID: "${CI_DATAFED_USER99_GLOBUS_UUID}"
    DATAFED_ZEROMQ_SYSTEM_SECRET: "${CI_DATAFED_ZEROMQ_SYSTEM_SECRET}"
  stage: end-to-end-test
  tags:
    - ci-datafed-client
  script:
    - ./scripts/generate_datafed.sh
    - env
    - cat ./config/datafed.sh
    - >
      cmake -S. -B build
      -DENABLE_FOXX_TESTS=OFF
      -DBUILD_CORE_SERVER=OFF
      -DBUILD_COMMON=OFF
      -DBUILD_WEB_SERVER=OFF
      -DBUILD_DOCS=OFF
      -DBUILD_PYTHON_CLIENT=ON
      -DBUILD_TESTS=ON
      -DENABLE_END_TO_END_TESTS=ON
      -DINSTALL_FOXX=OFF
    - cmake --build build
    - cmake --build build --target pydatafed
    - cmake --build build --target test

